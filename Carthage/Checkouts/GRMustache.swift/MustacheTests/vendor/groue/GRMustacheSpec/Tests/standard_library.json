{
  "tests": [
    {
      "name": "`HTMLEscape` escapes nil as empty string.",
      "data": {},
      "template": "<{{HTMLEscape(missing)}}>",
      "expected": "<>"
    },
    {
      "name": "`HTMLEscape` escapes null as empty string.",
      "data": { "null": null },
      "template": "<{{HTMLEscape(null)}}>",
      "expected": "<>"
    },
    {
      "name": "`HTMLEscape` escapes any value, including numbers.",
      "data": 1,
      "template": "<{{HTMLEscape(.)}}>",
      "expected": "<1>"
    },
    {
      "name": "`HTMLEscape` escapes HTML characters of strings.",
      "data": "foo&\"'<>",
      "template": "{{{.}}} {{{HTMLEscape(.)}}} {{HTMLEscape(.)}}",
      "expected": "foo&\"'<> foo&amp;&quot;&apos;&lt;&gt; foo&amp;amp;&amp;quot;&amp;apos;&amp;lt;&amp;gt;"
    },
    {
      "name": "`HTMLEscape` escapes all inner variable tags in a section.",
      "data": { "subject1": "<", "subject2": ">" },
      "template": "{{#HTMLEscape}}{{subject1}}{{subject2}}{{{subject1}}}{{{subject2}}}{{/HTMLEscape}}",
      "expected": "&amp;lt;&amp;gt;&lt;&gt;"
    },
    {
      "name": "`HTMLEscape` does not escape inner section tags.",
      "data": { "subject1": "<" },
      "template": "{{#HTMLEscape}}{{#subject1}}{{{subject1}}}{{/subject1}}{{^subject1}}-{{/subject1}}{{#subject2}}{{{subject2}}}{{/subject2}}{{^subject2}}-{{/subject2}}{{/HTMLEscape}}",
      "expected": "&lt;-"
    },
    {
      "name": "`javascriptEscape` escapes nil as empty string.",
      "data": {},
      "template": "<{{javascriptEscape(missing)}}>",
      "expected": "<>"
    },
    {
      "name": "`javascriptEscape` escapes null as empty string.",
      "data": { "null": null },
      "template": "<{{javascriptEscape(null)}}>",
      "expected": "<>"
    },
    {
      "name": "`javascriptEscape` escapes any value, including numbers.",
      "data": 1,
      "template": "<{{javascriptEscape(.)}}>",
      "expected": "<1>"
    },
    {
      "name": "`javascriptEscape` escapes any value",
      "data": "\"double quotes\" and 'single quotes'",
      "template": "{{javascriptEscape(.)}}",
      "expected": "\\u0022double quotes\\u0022 and \\u0027single quotes\\u0027"
    },
    {
      "name": "`javascriptEscape` escapes double and single quotes",
      "data": "\"double quotes\" and 'single quotes'",
      "template": "{{javascriptEscape(.)}}",
      "expected": "\\u0022double quotes\\u0022 and \\u0027single quotes\\u0027"
    },
    {
      "name": "`javascriptEscape` escapes backslashes",
      "data": "\\ : backslashes, too",
      "template": "{{javascriptEscape(.)}}",
      "expected": "\\u005C : backslashes, too"
    },
    {
      "name": "`javascriptEscape` escapes control characters",
      "data": "and lots of whitespace: \r\n\t\f\b",
      "template": "{{javascriptEscape(.)}}",
      "expected": "and lots of whitespace: \\u000D\\u000A\\u0009\\u000C\\u0008"
    },
    {
      "name": "`javascriptEscape` escapes HTML tags",
      "data": "<script>and this</script>",
      "template": "{{javascriptEscape(.)}}",
      "expected": "\\u003Cscript\\u003Eand this\\u003C/script\\u003E"
    },
    {
      "name": "`javascriptEscape` escapes PARAGRAPH SEPARATOR U+2029 and LINE SEPARATOR U+2028",
      "data": "paragraph separator:\u2029and line separator:\u2028",
      "template": "{{javascriptEscape(.)}}",
      "expected": "paragraph separator:\\u2029and line separator:\\u2028"
    },
    {
      "name": "`javascriptEscape` escapes all inner variable tags in a section.",
      "data": { "subject1": "'subject1'", "subject2": "'subject2'" },
      "template": "{{#javascriptEscape}}{\"subject1\":\"{{subject1}}\",\"subject2\":\"{{subject2}}\"}{{/javascriptEscape}}",
      "expected": "{\"subject1\":\"\\u0027subject1\\u0027\",\"subject2\":\"\\u0027subject2\\u0027\"}"
    },
    {
      "name": "`javascriptEscape` does not escape inner section tags.",
      "data": { "subject1": "'subject1'" },
      "template": "{{#javascriptEscape}}{\"subject1\":{{#subject1}}\"{{subject1}}\"{{/subject1}}{{^subject1}}null{{/subject1}},\"subject2\":{{#subject2}}\"{{subject2}}\"{{/subject2}}{{^subject2}}null{{/subject2}}}{{/javascriptEscape}}",
      "expected": "{\"subject1\":\"\\u0027subject1\\u0027\",\"subject2\":null}"
    },
    {
      "name": "`URLEscape` escapes nil as empty string.",
      "data": {},
      "template": "<{{URLEscape(missing)}}>",
      "expected": "<>"
    },
    {
      "name": "`URLEscape` escapes null as empty string.",
      "data": { "null": null },
      "template": "<{{URLEscape(null)}}>",
      "expected": "<>"
    },
    {
      "name": "`URLEscape` escapes any value, including numbers.",
      "data": 1,
      "template": "<{{URLEscape(.)}}>",
      "expected": "<1>"
    },
    {
      "name": "`URLEscape` escapes strings with UTF8 encoding.",
      "data": "?&=\r\n\t\f\b<>\"[]{}",
      "template": "{{URLEscape(.)}}",
      "expected": "%3F%26%3D%0D%0A%09%0C%08%3C%3E%22%5B%5D%7B%7D"
    },
    {
      "name": "`URLEscape` escapes unicode strings with UTF8 encoding.",
      "data": "éı\ud83d\ude04",
      "template": "{{URLEscape(.)}}",
      "expected": "%C3%A9%C4%B1%F0%9F%98%84"
    },
    {
      "name": "`URLEscape` escapes all inner variable tags in a section.",
      "data": { "subject1": " ", "subject2": "&" },
      "template": "{{#URLEscape}}subject1={{subject1}}&subject2={{subject2}}{{/URLEscape}}",
      "expected": "subject1=%20&subject2=%26"
    },
    {
      "name": "`URLEscape` does not escape inner section tags.",
      "data": { "subject1": " " },
      "template": "{{#URLEscape}}subject1={{subject1}}&subject2={{#subject2}}{{subject2}}{{/subject2}}{{^subject2}}0{{/subject2}}{{/URLEscape}}",
      "expected": "subject1=%20&subject2=0"
    },
    {
      "name": "`each` filter iterates its array argument and makes the `@first`, `@last` keys available for rendering.",
      "data": {
        "array": ["a", "b", "c", "d"]
      },
      "template": "{{# each(array) }}{{^ @first }}{{# @last }} and {{/}}{{^ @last }}, {{/}}{{/}}{{.}}{{/}}",
      "expected": "a, b, c and d"
    },
    {
      "name": "`each` filter iterates its array argument and makes the `@index` key available for rendering.",
      "data": {
        "array": ["a", "b", "c", "d"]
      },
      "template": "{{# each(array) }}{{ @index }}{{/}}",
      "expected": "0123"
    },
    {
      "name": "`each` filter iterates its array argument and makes the `@indexPlusOne` key available for rendering.",
      "data": {
        "array": ["a", "b", "c", "d"]
      },
      "template": "{{# each(array) }}{{ @indexPlusOne }}{{/}}",
      "expected": "1234"
    },
    {
      "name": "`each` filter iterates its array argument and makes the `@indexIsEven` key available for rendering.",
      "data": {
        "array": ["a", "b", "c", "d"]
      },
      "template": "{{# each(array) }}{{# @indexIsEven }}e{{/}}{{^ @indexIsEven }}o{{/}}{{/}}",
      "expected": "eoeo"
    },
    {
      "name": "`each` filter does not render for empty arrays.",
      "data": {
        "array": []
      },
      "template": "{{# each(array) }}---{{/}}{{^ each(array) }}+++{{/}}",
      "expected": "+++"
    },
    {
      "name": "`each` filter does not alter context access.",
      "data": { "array": [{ "name": "foo" }, { "name": "bar" }] },
      "template": "{{# each(array) }}<{{@index}}:{{name}}>{{/}}",
      "expected": "<0:foo><1:bar>"
    },
    {
      "name": "`each` filter should render independently all lists of an array.",
      "data": { "array": [["a", "b"], [], [0, 1]] },
      "template": "<{{# each(array) }}{{@index}}:({{#.}}{{.}}{{/}}{{^.}}-{{/}}){{/}}>",
      "expected": "<0:(ab)1:(-)2:(01)>"
    },
    {
      "name": "`each` filter iterates its dictionary argument and make the `@key` key available for rendering.",
      "data": {
        "dictionary": { "key": "value" }
      },
      "template": "{{# each(dictionary) }}{{ @key }}:{{.}}{{/}}",
      "expected": "key:value"
    },
    {
      "name": "`each` filter iterates its dictionary argument and make the `@first`, `@last` keys available for rendering.",
      "data": {
        "dictionary": { "key1": "value", "key2": "value", "key3": "value" }
      },
      "template": "{{# each(dictionary) }}{{^ @first }}{{# @last }} and {{/}}{{^ @last }}, {{/}}{{/}}{{.}}{{/}}",
      "expected": "value, value and value"
    },
    {
      "name": "`each` filter iterates its dictionary argument and makes the `@index` key available for rendering.",
      "data": {
        "dictionary": { "key1": "value1", "key2": "value2", "key3": "value3" }
      },
      "template": "{{# each(dictionary) }}{{ @indexPlusOne }}{{/}}",
      "expected": "123"
    },
    {
      "name": "`each` filter iterates its dictionary argument and makes the `@indexPlusOne` key available for rendering.",
      "data": {
        "dictionary": { "key1": "value1", "key2": "value2", "key3": "value3" }
      },
      "template": "{{# each(dictionary) }}{{ @indexPlusOne }}{{/}}",
      "expected": "123"
    },
    {
      "name": "`each` filter iterates its dictionary argument and makes the `@indexIsEven` key available for rendering.",
      "data": {
        "dictionary": { "key1": "value", "key2": "value", "key3": "value" }
      },
      "template": "{{# each(dictionary) }}{{# @indexIsEven }}e{{/}}{{^ @indexIsEven }}o{{/}}{{/}}",
      "expected": "eoe"
    },
    {
      "name": "`each` filter does not render for empty dictionaries.",
      "data": {
        "dictionary": {}
      },
      "template": "{{# each(dictionary) }}---{{/}}{{^ each(dictionary) }}+++{{/}}",
      "expected": "+++"
    },
    {
      "name": "`each` filter does not alter context access.",
      "data": { "dictionary": { "key": { "name": "foo" } } },
      "template": "{{# each(dictionary) }}<{{@key}}:{{name}}>{{/}}",
      "expected": "<key:foo>"
    },
    {
      "name": "`each` filter should render independently all lists of a dictionary.",
      "data": { "dictionary": { "key": [ "a", "b" ] } },
      "template": "{{# each(dictionary) }}{{ @key }}:{{#.}}{{.}}{{/}}{{/}}",
      "expected": "key:ab"
    },
    {
      "name": "`zip` iterates its collection arguments in the same time, as many times as there are elements in the longest collection.",
      "data": {
        "names": [{"name":"Alice", "o": "n"}, {"name":"Bob", "o": "n"}, {"name":"Craig", "o": "n"}],
        "ages": [{"age":30, "o": "a"}, {"age":25, "o": "a"}],
        "hair": [{"hair":"brown", "o": "h"}, {"hair":"silver", "o": "h"}, {"hair":"dark", "o": "h"}]},
      "template": "{{# zip(hair, names, ages) }}{{ name }} ({{ o }}) is {{ age }} years old and has {{ hair}} hair. {{/}}",
      "expected": "Alice (a) is 30 years old and has brown hair. Bob (a) is 25 years old and has silver hair. Craig (n) is  years old and has dark hair. "
    },
    {
      "name": "`zip` iterates its collection arguments in the same time, as many times as there are elements in the longest collection.",
      "data": {
        "names": [{"name":"Alice", "o": "n"}, {"name":"Bob", "o": "n"}, {"name":"Craig", "o": "n"}],
        "ages": [{"age":30, "o": "a"}, {"age":25, "o": "a"}],
        "hair": [{"hair":"brown", "o": "h"}, {"hair":"silver", "o": "h"}, {"hair":"dark", "o": "h"}]},
      "template": "{{# zip(ages, names, hair) }}{{ name }} ({{ o }}) is {{ age }} years old and has {{ hair}} hair. {{/}}",
      "expected": "Alice (h) is 30 years old and has brown hair. Bob (h) is 25 years old and has silver hair. Craig (h) is  years old and has dark hair. "
    },
    {
      "name": "`zip` renders an error when provided with something else than a collection.",
      "data": {
        "nonArray": "blah"
      },
      "template": "{{# zip(nonArray) }}...{{/}}",
      "expected_error": "Non-enumerable argument in zip filter"
    },
    {
      "name": "`zip` preserves the boolean value of empty arrays.",
      "data": {
        "emptyArray": []
      },
      "template": "{{# zip(emptyArray, emptyArray) }}---{{/}}{{^ zip(emptyArray, emptyArray) }}+++{{/}}",
      "expected": "+++"
    },
    {
      "name": "`each` and `zip` filters can chain.",
      "data": {
        "array1": [{"name": "Alice"}, {"name": "Bob"}],
        "array2": [{"age": 20}, {"age": 30}]
      },
      "template": "{{# each(zip(array1, array2)) }}{{^ @first }}, {{/}}{{ @index }}:({{ name }}, {{ age }}){{/}}",
      "expected" :"0:(Alice, 20), 1:(Bob, 30)"
    }
  ]
}
